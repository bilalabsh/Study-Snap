import streamlit as st
from PyPDF2 import PdfReader
from dotenv import load_dotenv 
import string
import InstructorEmbedding
from InstructorEmbedding import INSTRUCTOR
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain_openai import ChatOpenAI
from htmlTemplates import css, user_template, bot_template
# from langchain.chat_models import ChatOpenAI

def filter_text(text): #filter out unreadable tezt
    printable = set(string.printable)
    filtered_text = ''.join(filter(lambda x: x in printable, text))
    return filtered_text

def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf) 
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

def get_chunks(text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks
def get_vectorstore(text_chunks):
    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_texts(text_chunks,embedding=embeddings)
    return vectorstore


def get_conversation_chain(vectorstore):
    llm=ChatOpenAI()
    memory= ConversationBufferMemory(memory_key='chat_history',return_messages=True)
    conversation_chain=ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        memory=memory
    )
    return conversation_chain

def handle_userinput(user_question):
    response=st.session_state.conversation('question:',user_question)
    st.write(response)
    
    
    
    # st.write(bot_template.replace("{{MSG}}",response),unsafe_allow_html=True)
    # return response

# def handle_userinput(user_question):
#     response=conversation.get_response(user_question)
#     print(response)
#     return response


def main():
    
    load_dotenv()
    st.set_page_config(page_title="Study Snap", page_icon="üìö")
    st.write(css,unsafe_allow_html=True) 
    
    if "conversation" not in st.session_state:
        st.session_state.conversation=None
    
    
    st.header("Study Snap üìù")
    user_question=st.text_input("Enter a question about your documents: ")
    
    st.write(user_template.replace("{{MSG}}","Hello AI"),unsafe_allow_html=True)
    st.write(bot_template.replace("{{MSG}}","Hello User"),unsafe_allow_html=True)
    
    
    if user_question:
        if st.session_state.conversation is not None:  # Checking if conversation chain is initialized
            handle_userinput(user_question)
    
    
        
    with st.sidebar:
        st.subheader("Upload your documents")
        pdf_docs = st.file_uploader("Upload PDFs here and Click Enter", accept_multiple_files=True)
        
        if st.button("Enter"):
            with st.spinner("Processing your request"):
                text = get_pdf_text(pdf_docs)
                filtered_text = filter_text(text)
                text_chunks = get_chunks(filtered_text)
                #create vector store
                # st.write(text_chunks)
                vectorstore=get_vectorstore(text_chunks)
                st.session_state.conversation=get_conversation_chain(vectorstore)
    
    # text = "My name is belol"

    # embeddings = HuggingFaceInstructEmbeddings()


    # embedded_text = embeddings.embed_query([text])

    # print("Embeddings:")
    # print(embedded_text)
   
    #get text chunks    
    
    
    print("vectorstore created")

    #allows to generate new msgs in convo
    
    
    
   

    #print(filtered_text)
    ##text_chunks = get_chunks(filtered_text)
    # print(text_chunks)
    # user_question=input("Enter your question: ")
    # if user_question:
    #     handle_userinput(user_question)
if __name__ == "__main__":
    main()